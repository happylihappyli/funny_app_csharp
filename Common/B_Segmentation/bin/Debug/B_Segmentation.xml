<?xml version="1.0"?>
<doc>
<assembly>
<name>
B_Segmentation
</name>
</assembly>
<members>
<member name="T:B_Segmentation.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:B_Segmentation.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:B_Segmentation.My.Resources.Resources.Culture">
<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member>
<member name="F:B_Segmentation.com.Funny.Segmentation.C_Convert.pTreapActive">
 <summary>
 需要激活的结构
 </summary>
 <remarks></remarks>
</member>
<member name="M:B_Segmentation.com.Funny.Segmentation.C_Convert.getConvert(B_Token.Funny.C_Token_Link@)">
 <summary>
 转化
 </summary>
 <param name="pToken_Link"></param>
</member>
<member name="M:B_Segmentation.com.Funny.Segmentation.C_Convert.getConvert_Token(CommonTreapVB.TreapVB.Treap{B_Segmentation.com.Funny.Segmentation.C_Word_Convert}@,B_Token.Funny.C_Token@)">
 <summary>
 
 </summary>
 <param name="pTreap_Active">激活的结构</param>
 <param name="pToken"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:B_Segmentation.com.Funny.Segmentation.C_Convert.Check_In_Active_Treap">
 <summary>
 判断是否在激活结构里有这个结构
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:B_Segmentation.com.Funny.Segmentation.C_Segmentation_Struct.Segmentation_List3(B_Segmentation.FunnyAI.C_Session_AI@,B_Token.Funny.C_Token_Link@)">
 <summary>
 3个元的结构
 </summary>
 <param name="pLink"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:B_Segmentation.com.Funny.Segmentation.C_Segmentation_Struct.Segmentation_List2(B_Segmentation.FunnyAI.C_Session_AI@,B_Token.Funny.C_Token_Link@)">
 <summary>
 2个元的结构
 </summary>
 <param name="pLink"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:B_Segmentation.com.Funny.Segmentation.C_Segmentation.Segmentation(System.String,System.Boolean,System.Boolean)">
 <summary>
 分词，返回结果为一棵词树，
 这棵树都是以词汇的第一个汉字为Key，
 它的子树势这个汉字对应的词
 </summary>
 <param name="strContent"></param>
 <param name="bList"></param>
 <param name="bNumFilter"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:B_Segmentation.com.Funny.Segmentation.C_Word_Seg">
 <summary>
 分词后的单词，比如 Word=发展中国, OutPutWord=发展 中国
 如果为空，则无分词
 也可以是泛化 苹果={水果.类}
 </summary>
 <remarks></remarks>
</member>
<member name="F:B_Segmentation.com.Funny.Segmentation.C_Word_Seg.Active_Word">
 <summary>
 激活的单词，这个单词如果有，就把当前 C_Word_Convert 复制到 Session 中，如果没有，就不激活这个 C_Word_Convert
 </summary>
 <remarks></remarks>
</member>
<member name="F:B_Segmentation.com.Funny.Segmentation.C_Word_Seg.Word">
 <summary>
 单词
 </summary>
 <remarks></remarks>
</member>
<member name="T:B_Segmentation.com.Funny.Segmentation.C_Word_Convert">
 <summary>
 分词后的单词，比如 Word=发展中国, OutPutWord=发展 中国
 如果为空，则无分词
 也可以是泛化 苹果={水果.类}
 </summary>
 <remarks></remarks>
</member>
<member name="F:B_Segmentation.com.Funny.Segmentation.C_Word_Convert.Active_Word">
 <summary>
 激活的单词，这个单词如果有，就把当前 C_Word_Convert 复制到 Session 中，如果没有，就不激活这个 C_Word_Convert
 </summary>
 <remarks></remarks>
</member>
<member name="F:B_Segmentation.com.Funny.Segmentation.C_Word_Convert.Word">
 <summary>
 单词
 </summary>
 <remarks></remarks>
</member>
<member name="F:B_Segmentation.FunnyWeber.C_User.MD5">
 <summary>
 密码的MD5
 </summary>
 <remarks></remarks>
</member>
<member name="F:B_Segmentation.FunnyAI.C_Session_AI.pTreapConvert">
 <summary>
 激活的 C_Convert_Word
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
