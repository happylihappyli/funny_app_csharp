//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ECMAScript.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IECMAScriptListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
//[System.CLSCompliant(false)]
public partial class ECMAScriptBaseListener : IECMAScriptListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] ECMAScriptParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] ECMAScriptParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.sourceElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSourceElements([NotNull] ECMAScriptParser.SourceElementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.sourceElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSourceElements([NotNull] ECMAScriptParser.SourceElementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.sourceElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSourceElement([NotNull] ECMAScriptParser.SourceElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.sourceElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSourceElement([NotNull] ECMAScriptParser.SourceElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] ECMAScriptParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] ECMAScriptParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] ECMAScriptParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] ECMAScriptParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.statementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementList([NotNull] ECMAScriptParser.StatementListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.statementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementList([NotNull] ECMAScriptParser.StatementListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.variableStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableStatement([NotNull] ECMAScriptParser.VariableStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.variableStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableStatement([NotNull] ECMAScriptParser.VariableStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.variableDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclarationList([NotNull] ECMAScriptParser.VariableDeclarationListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.variableDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclarationList([NotNull] ECMAScriptParser.VariableDeclarationListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] ECMAScriptParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] ECMAScriptParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.initialiser"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitialiser([NotNull] ECMAScriptParser.InitialiserContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.initialiser"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitialiser([NotNull] ECMAScriptParser.InitialiserContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.emptyStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] ECMAScriptParser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.emptyStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] ECMAScriptParser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] ECMAScriptParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] ECMAScriptParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] ECMAScriptParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] ECMAScriptParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoStatement([NotNull] ECMAScriptParser.DoStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoStatement([NotNull] ECMAScriptParser.DoStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] ECMAScriptParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] ECMAScriptParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] ECMAScriptParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] ECMAScriptParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForVarStatement([NotNull] ECMAScriptParser.ForVarStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForVarStatement([NotNull] ECMAScriptParser.ForVarStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForInStatement([NotNull] ECMAScriptParser.ForInStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForInStatement([NotNull] ECMAScriptParser.ForInStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForVarInStatement([NotNull] ECMAScriptParser.ForVarInStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForVarInStatement([NotNull] ECMAScriptParser.ForVarInStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.continueStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueStatement([NotNull] ECMAScriptParser.ContinueStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.continueStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueStatement([NotNull] ECMAScriptParser.ContinueStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.breakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] ECMAScriptParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.breakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] ECMAScriptParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] ECMAScriptParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] ECMAScriptParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.withStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithStatement([NotNull] ECMAScriptParser.WithStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.withStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithStatement([NotNull] ECMAScriptParser.WithStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.switchStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStatement([NotNull] ECMAScriptParser.SwitchStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.switchStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStatement([NotNull] ECMAScriptParser.SwitchStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseBlock([NotNull] ECMAScriptParser.CaseBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseBlock([NotNull] ECMAScriptParser.CaseBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.caseClauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseClauses([NotNull] ECMAScriptParser.CaseClausesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.caseClauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseClauses([NotNull] ECMAScriptParser.CaseClausesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.caseClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseClause([NotNull] ECMAScriptParser.CaseClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.caseClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseClause([NotNull] ECMAScriptParser.CaseClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.defaultClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultClause([NotNull] ECMAScriptParser.DefaultClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.defaultClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultClause([NotNull] ECMAScriptParser.DefaultClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.labelledStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabelledStatement([NotNull] ECMAScriptParser.LabelledStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.labelledStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabelledStatement([NotNull] ECMAScriptParser.LabelledStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.throwStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrowStatement([NotNull] ECMAScriptParser.ThrowStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.throwStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrowStatement([NotNull] ECMAScriptParser.ThrowStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.tryStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTryStatement([NotNull] ECMAScriptParser.TryStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.tryStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTryStatement([NotNull] ECMAScriptParser.TryStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.catchProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCatchProduction([NotNull] ECMAScriptParser.CatchProductionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.catchProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCatchProduction([NotNull] ECMAScriptParser.CatchProductionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.finallyProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFinallyProduction([NotNull] ECMAScriptParser.FinallyProductionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.finallyProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFinallyProduction([NotNull] ECMAScriptParser.FinallyProductionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.debuggerStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDebuggerStatement([NotNull] ECMAScriptParser.DebuggerStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.debuggerStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDebuggerStatement([NotNull] ECMAScriptParser.DebuggerStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDeclaration([NotNull] ECMAScriptParser.FunctionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDeclaration([NotNull] ECMAScriptParser.FunctionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.formalParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormalParameterList([NotNull] ECMAScriptParser.FormalParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.formalParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormalParameterList([NotNull] ECMAScriptParser.FormalParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.functionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionBody([NotNull] ECMAScriptParser.FunctionBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.functionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionBody([NotNull] ECMAScriptParser.FunctionBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.arrayLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLiteral([NotNull] ECMAScriptParser.ArrayLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.arrayLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLiteral([NotNull] ECMAScriptParser.ArrayLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.elementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElementList([NotNull] ECMAScriptParser.ElementListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.elementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElementList([NotNull] ECMAScriptParser.ElementListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.elision"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElision([NotNull] ECMAScriptParser.ElisionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.elision"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElision([NotNull] ECMAScriptParser.ElisionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.objectLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectLiteral([NotNull] ECMAScriptParser.ObjectLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.objectLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectLiteral([NotNull] ECMAScriptParser.ObjectLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.propertyNameAndValueList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyNameAndValueList([NotNull] ECMAScriptParser.PropertyNameAndValueListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.propertyNameAndValueList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyNameAndValueList([NotNull] ECMAScriptParser.PropertyNameAndValueListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyExpressionAssignment([NotNull] ECMAScriptParser.PropertyExpressionAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyExpressionAssignment([NotNull] ECMAScriptParser.PropertyExpressionAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyGetter([NotNull] ECMAScriptParser.PropertyGetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyGetter([NotNull] ECMAScriptParser.PropertyGetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertySetter([NotNull] ECMAScriptParser.PropertySetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertySetter([NotNull] ECMAScriptParser.PropertySetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.propertyName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyName([NotNull] ECMAScriptParser.PropertyNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.propertyName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyName([NotNull] ECMAScriptParser.PropertyNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.propertySetParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertySetParameterList([NotNull] ECMAScriptParser.PropertySetParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.propertySetParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertySetParameterList([NotNull] ECMAScriptParser.PropertySetParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] ECMAScriptParser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] ECMAScriptParser.ArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] ECMAScriptParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] ECMAScriptParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.expressionSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionSequence([NotNull] ECMAScriptParser.ExpressionSequenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.expressionSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionSequence([NotNull] ECMAScriptParser.ExpressionSequenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTernaryExpression([NotNull] ECMAScriptParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTernaryExpression([NotNull] ECMAScriptParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAndExpression([NotNull] ECMAScriptParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAndExpression([NotNull] ECMAScriptParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreIncrementExpression([NotNull] ECMAScriptParser.PreIncrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreIncrementExpression([NotNull] ECMAScriptParser.PreIncrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectLiteralExpression([NotNull] ECMAScriptParser.ObjectLiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectLiteralExpression([NotNull] ECMAScriptParser.ObjectLiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInExpression([NotNull] ECMAScriptParser.InExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInExpression([NotNull] ECMAScriptParser.InExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOrExpression([NotNull] ECMAScriptParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOrExpression([NotNull] ECMAScriptParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] ECMAScriptParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] ECMAScriptParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreDecreaseExpression([NotNull] ECMAScriptParser.PreDecreaseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreDecreaseExpression([NotNull] ECMAScriptParser.PreDecreaseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentsExpression([NotNull] ECMAScriptParser.ArgumentsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentsExpression([NotNull] ECMAScriptParser.ArgumentsExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisExpression([NotNull] ECMAScriptParser.ThisExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisExpression([NotNull] ECMAScriptParser.ThisExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionExpression([NotNull] ECMAScriptParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionExpression([NotNull] ECMAScriptParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMinusExpression([NotNull] ECMAScriptParser.UnaryMinusExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMinusExpression([NotNull] ECMAScriptParser.UnaryMinusExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentExpression([NotNull] ECMAScriptParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentExpression([NotNull] ECMAScriptParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostDecreaseExpression([NotNull] ECMAScriptParser.PostDecreaseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostDecreaseExpression([NotNull] ECMAScriptParser.PostDecreaseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeofExpression([NotNull] ECMAScriptParser.TypeofExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeofExpression([NotNull] ECMAScriptParser.TypeofExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInstanceofExpression([NotNull] ECMAScriptParser.InstanceofExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInstanceofExpression([NotNull] ECMAScriptParser.InstanceofExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryPlusExpression([NotNull] ECMAScriptParser.UnaryPlusExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryPlusExpression([NotNull] ECMAScriptParser.UnaryPlusExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeleteExpression([NotNull] ECMAScriptParser.DeleteExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeleteExpression([NotNull] ECMAScriptParser.DeleteExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityExpression([NotNull] ECMAScriptParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityExpression([NotNull] ECMAScriptParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitXOrExpression([NotNull] ECMAScriptParser.BitXOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitXOrExpression([NotNull] ECMAScriptParser.BitXOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] ECMAScriptParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] ECMAScriptParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitShiftExpression([NotNull] ECMAScriptParser.BitShiftExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitShiftExpression([NotNull] ECMAScriptParser.BitShiftExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpression([NotNull] ECMAScriptParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpression([NotNull] ECMAScriptParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] ECMAScriptParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] ECMAScriptParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpression([NotNull] ECMAScriptParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpression([NotNull] ECMAScriptParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostIncrementExpression([NotNull] ECMAScriptParser.PostIncrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostIncrementExpression([NotNull] ECMAScriptParser.PostIncrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitNotExpression([NotNull] ECMAScriptParser.BitNotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitNotExpression([NotNull] ECMAScriptParser.BitNotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewExpression([NotNull] ECMAScriptParser.NewExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewExpression([NotNull] ECMAScriptParser.NewExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] ECMAScriptParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] ECMAScriptParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLiteralExpression([NotNull] ECMAScriptParser.ArrayLiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLiteralExpression([NotNull] ECMAScriptParser.ArrayLiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberDotExpression([NotNull] ECMAScriptParser.MemberDotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberDotExpression([NotNull] ECMAScriptParser.MemberDotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberIndexExpression([NotNull] ECMAScriptParser.MemberIndexExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberIndexExpression([NotNull] ECMAScriptParser.MemberIndexExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] ECMAScriptParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] ECMAScriptParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitAndExpression([NotNull] ECMAScriptParser.BitAndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitAndExpression([NotNull] ECMAScriptParser.BitAndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitOrExpression([NotNull] ECMAScriptParser.BitOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitOrExpression([NotNull] ECMAScriptParser.BitOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentOperatorExpression([NotNull] ECMAScriptParser.AssignmentOperatorExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentOperatorExpression([NotNull] ECMAScriptParser.AssignmentOperatorExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVoidExpression([NotNull] ECMAScriptParser.VoidExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVoidExpression([NotNull] ECMAScriptParser.VoidExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.assignmentOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentOperator([NotNull] ECMAScriptParser.AssignmentOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.assignmentOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentOperator([NotNull] ECMAScriptParser.AssignmentOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] ECMAScriptParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] ECMAScriptParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumericLiteral([NotNull] ECMAScriptParser.NumericLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumericLiteral([NotNull] ECMAScriptParser.NumericLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.identifierName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierName([NotNull] ECMAScriptParser.IdentifierNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.identifierName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierName([NotNull] ECMAScriptParser.IdentifierNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.reservedWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedWord([NotNull] ECMAScriptParser.ReservedWordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.reservedWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedWord([NotNull] ECMAScriptParser.ReservedWordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyword([NotNull] ECMAScriptParser.KeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyword([NotNull] ECMAScriptParser.KeywordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.futureReservedWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFutureReservedWord([NotNull] ECMAScriptParser.FutureReservedWordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.futureReservedWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFutureReservedWord([NotNull] ECMAScriptParser.FutureReservedWordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.getter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetter([NotNull] ECMAScriptParser.GetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.getter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetter([NotNull] ECMAScriptParser.GetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.setter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetter([NotNull] ECMAScriptParser.SetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.setter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetter([NotNull] ECMAScriptParser.SetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.eos"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEos([NotNull] ECMAScriptParser.EosContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.eos"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEos([NotNull] ECMAScriptParser.EosContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.eof"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEof([NotNull] ECMAScriptParser.EofContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.eof"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEof([NotNull] ECMAScriptParser.EofContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
