//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ECMAScript.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ECMAScriptParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
//[System.CLSCompliant(false)]
public interface IECMAScriptListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ECMAScriptParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ECMAScriptParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceElements([NotNull] ECMAScriptParser.SourceElementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceElements([NotNull] ECMAScriptParser.SourceElementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceElement([NotNull] ECMAScriptParser.SourceElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceElement([NotNull] ECMAScriptParser.SourceElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ECMAScriptParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ECMAScriptParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] ECMAScriptParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] ECMAScriptParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] ECMAScriptParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] ECMAScriptParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.variableStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableStatement([NotNull] ECMAScriptParser.VariableStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.variableStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableStatement([NotNull] ECMAScriptParser.VariableStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationList([NotNull] ECMAScriptParser.VariableDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationList([NotNull] ECMAScriptParser.VariableDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] ECMAScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] ECMAScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.initialiser"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialiser([NotNull] ECMAScriptParser.InitialiserContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.initialiser"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialiser([NotNull] ECMAScriptParser.InitialiserContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] ECMAScriptParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] ECMAScriptParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] ECMAScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] ECMAScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] ECMAScriptParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] ECMAScriptParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoStatement([NotNull] ECMAScriptParser.DoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoStatement([NotNull] ECMAScriptParser.DoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] ECMAScriptParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] ECMAScriptParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] ECMAScriptParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] ECMAScriptParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForVarStatement([NotNull] ECMAScriptParser.ForVarStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForVarStatement([NotNull] ECMAScriptParser.ForVarStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInStatement([NotNull] ECMAScriptParser.ForInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInStatement([NotNull] ECMAScriptParser.ForInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForVarInStatement([NotNull] ECMAScriptParser.ForVarInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForVarInStatement([NotNull] ECMAScriptParser.ForVarInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] ECMAScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] ECMAScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] ECMAScriptParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] ECMAScriptParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] ECMAScriptParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] ECMAScriptParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStatement([NotNull] ECMAScriptParser.WithStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStatement([NotNull] ECMAScriptParser.WithStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] ECMAScriptParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] ECMAScriptParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseBlock([NotNull] ECMAScriptParser.CaseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseBlock([NotNull] ECMAScriptParser.CaseBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClauses([NotNull] ECMAScriptParser.CaseClausesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClauses([NotNull] ECMAScriptParser.CaseClausesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClause([NotNull] ECMAScriptParser.CaseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClause([NotNull] ECMAScriptParser.CaseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultClause([NotNull] ECMAScriptParser.DefaultClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultClause([NotNull] ECMAScriptParser.DefaultClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.labelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabelledStatement([NotNull] ECMAScriptParser.LabelledStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.labelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabelledStatement([NotNull] ECMAScriptParser.LabelledStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] ECMAScriptParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] ECMAScriptParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] ECMAScriptParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] ECMAScriptParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchProduction([NotNull] ECMAScriptParser.CatchProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchProduction([NotNull] ECMAScriptParser.CatchProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinallyProduction([NotNull] ECMAScriptParser.FinallyProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinallyProduction([NotNull] ECMAScriptParser.FinallyProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDebuggerStatement([NotNull] ECMAScriptParser.DebuggerStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDebuggerStatement([NotNull] ECMAScriptParser.DebuggerStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] ECMAScriptParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] ECMAScriptParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterList([NotNull] ECMAScriptParser.FormalParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterList([NotNull] ECMAScriptParser.FormalParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionBody([NotNull] ECMAScriptParser.FunctionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionBody([NotNull] ECMAScriptParser.FunctionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] ECMAScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] ECMAScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementList([NotNull] ECMAScriptParser.ElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementList([NotNull] ECMAScriptParser.ElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.elision"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElision([NotNull] ECMAScriptParser.ElisionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.elision"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElision([NotNull] ECMAScriptParser.ElisionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteral([NotNull] ECMAScriptParser.ObjectLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteral([NotNull] ECMAScriptParser.ObjectLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.propertyNameAndValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyNameAndValueList([NotNull] ECMAScriptParser.PropertyNameAndValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.propertyNameAndValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyNameAndValueList([NotNull] ECMAScriptParser.PropertyNameAndValueListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyExpressionAssignment([NotNull] ECMAScriptParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyExpressionAssignment([NotNull] ECMAScriptParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyGetter([NotNull] ECMAScriptParser.PropertyGetterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyGetter([NotNull] ECMAScriptParser.PropertyGetterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySetter([NotNull] ECMAScriptParser.PropertySetterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="ECMAScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySetter([NotNull] ECMAScriptParser.PropertySetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.propertyName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyName([NotNull] ECMAScriptParser.PropertyNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.propertyName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyName([NotNull] ECMAScriptParser.PropertyNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.propertySetParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySetParameterList([NotNull] ECMAScriptParser.PropertySetParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.propertySetParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySetParameterList([NotNull] ECMAScriptParser.PropertySetParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] ECMAScriptParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] ECMAScriptParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] ECMAScriptParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] ECMAScriptParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionSequence([NotNull] ECMAScriptParser.ExpressionSequenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionSequence([NotNull] ECMAScriptParser.ExpressionSequenceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] ECMAScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] ECMAScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpression([NotNull] ECMAScriptParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpression([NotNull] ECMAScriptParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreIncrementExpression([NotNull] ECMAScriptParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreIncrementExpression([NotNull] ECMAScriptParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteralExpression([NotNull] ECMAScriptParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteralExpression([NotNull] ECMAScriptParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] ECMAScriptParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] ECMAScriptParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpression([NotNull] ECMAScriptParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpression([NotNull] ECMAScriptParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] ECMAScriptParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] ECMAScriptParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreDecreaseExpression([NotNull] ECMAScriptParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreDecreaseExpression([NotNull] ECMAScriptParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentsExpression([NotNull] ECMAScriptParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentsExpression([NotNull] ECMAScriptParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] ECMAScriptParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] ECMAScriptParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpression([NotNull] ECMAScriptParser.FunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpression([NotNull] ECMAScriptParser.FunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] ECMAScriptParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] ECMAScriptParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] ECMAScriptParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] ECMAScriptParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostDecreaseExpression([NotNull] ECMAScriptParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostDecreaseExpression([NotNull] ECMAScriptParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofExpression([NotNull] ECMAScriptParser.TypeofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofExpression([NotNull] ECMAScriptParser.TypeofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceofExpression([NotNull] ECMAScriptParser.InstanceofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceofExpression([NotNull] ECMAScriptParser.InstanceofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryPlusExpression([NotNull] ECMAScriptParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryPlusExpression([NotNull] ECMAScriptParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeleteExpression([NotNull] ECMAScriptParser.DeleteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeleteExpression([NotNull] ECMAScriptParser.DeleteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] ECMAScriptParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] ECMAScriptParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitXOrExpression([NotNull] ECMAScriptParser.BitXOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitXOrExpression([NotNull] ECMAScriptParser.BitXOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] ECMAScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] ECMAScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitShiftExpression([NotNull] ECMAScriptParser.BitShiftExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitShiftExpression([NotNull] ECMAScriptParser.BitShiftExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] ECMAScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] ECMAScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] ECMAScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] ECMAScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] ECMAScriptParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] ECMAScriptParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostIncrementExpression([NotNull] ECMAScriptParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostIncrementExpression([NotNull] ECMAScriptParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitNotExpression([NotNull] ECMAScriptParser.BitNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitNotExpression([NotNull] ECMAScriptParser.BitNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpression([NotNull] ECMAScriptParser.NewExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpression([NotNull] ECMAScriptParser.NewExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] ECMAScriptParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] ECMAScriptParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteralExpression([NotNull] ECMAScriptParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteralExpression([NotNull] ECMAScriptParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberDotExpression([NotNull] ECMAScriptParser.MemberDotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberDotExpression([NotNull] ECMAScriptParser.MemberDotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberIndexExpression([NotNull] ECMAScriptParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberIndexExpression([NotNull] ECMAScriptParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] ECMAScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] ECMAScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitAndExpression([NotNull] ECMAScriptParser.BitAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitAndExpression([NotNull] ECMAScriptParser.BitAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitOrExpression([NotNull] ECMAScriptParser.BitOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitOrExpression([NotNull] ECMAScriptParser.BitOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperatorExpression([NotNull] ECMAScriptParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperatorExpression([NotNull] ECMAScriptParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVoidExpression([NotNull] ECMAScriptParser.VoidExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="ECMAScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVoidExpression([NotNull] ECMAScriptParser.VoidExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperator([NotNull] ECMAScriptParser.AssignmentOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperator([NotNull] ECMAScriptParser.AssignmentOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] ECMAScriptParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] ECMAScriptParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumericLiteral([NotNull] ECMAScriptParser.NumericLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumericLiteral([NotNull] ECMAScriptParser.NumericLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierName([NotNull] ECMAScriptParser.IdentifierNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierName([NotNull] ECMAScriptParser.IdentifierNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedWord([NotNull] ECMAScriptParser.ReservedWordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedWord([NotNull] ECMAScriptParser.ReservedWordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] ECMAScriptParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] ECMAScriptParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.futureReservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFutureReservedWord([NotNull] ECMAScriptParser.FutureReservedWordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.futureReservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFutureReservedWord([NotNull] ECMAScriptParser.FutureReservedWordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.getter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter([NotNull] ECMAScriptParser.GetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.getter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter([NotNull] ECMAScriptParser.GetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.setter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter([NotNull] ECMAScriptParser.SetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.setter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter([NotNull] ECMAScriptParser.SetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEos([NotNull] ECMAScriptParser.EosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEos([NotNull] ECMAScriptParser.EosContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEof([NotNull] ECMAScriptParser.EofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEof([NotNull] ECMAScriptParser.EofContext context);
}
